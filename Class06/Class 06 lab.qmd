---
title: "Class 06: R Functions"
author: "Kai Zhao (PID: A17599942)"
format: pdf
---

# All about functions in R

Functions are the way we get stuff done in R. we call a function to read data, compute stuff, plot stuff, etc. ect.

Rmakes writting functions accessable but we should always start by tring to get a working snippet of code first before we write our function.

## Todays lab

we will grade a whole class of student assignments. We will always try to start with a simplified version of the problems.

```{r}
# Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```


If we want the average we can use the `mean()` function.

```{r}
mean(student1)
```
Let's be nice instructors and drop the lowest score so the answer should be 100. 


I can use the `min()` function to find the lowest value

```{r}
min(student1)
```
I found the `which.min()` function that may be useful here.
How does it work? Let's just try it
```{r}
student1
which.min(student1)
```

I can use the minus syntax trick to get everthing buy the element with the mean value
```{r}
student1[-which.min(student1)]
```


I have my first working snipet of code
```{r}
mean(student1[-which.min(student1)])
```

Let's test on the other students

```{r}
student2
mean(student2[-which.min(student2)])

```


Where is the problem - oh it is the `mean()` with NA input returns NA by default but I can Change this.
```{r}
mean(student2, na.rm=TRUE)
```


```{r}
mean(student3, na.rm=TRUE)
```

No bueno. We need to fix this!

I want stop working with `student1`, `student2` etc. and typing it out every time so let instead work with an input called `x`.

```{r}
x <- student2
x
```

We want to overwrite the NA values with 0 - if you miss a homework your score zero 

Google and Claude to told me about the `is.na()`
```{r}
x[is.na(x)]
```

We can use logical to index a vector

```{r}
y <- 1:5
y
y>3
y[y>3] <- 100
y
```
```{r}
x[is.na(x)] <-  0
x
```
drop the lowest score
```{r}
x[is.na(x)] <-  0
mean(x[-which.min(x)])
```
This is all my working snippet of code that solves the problem for all my example student inputs.
```{r}
x <- student3
# Mask NA values to zero
x[is.na(x)] <- 0
# Drop lowest score and get the mean
mean(x[-which.min(x)])
```

### Now we can creat the grade function buy using `function()`
>Q1. Write a function grade() to determine an overall grade from a vector of student homework assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an NA value) this can be used as a score to be potentially dropped. Your final function should be adquately explained with code comments and be able to work on an example class gradebooksuch as this one in CSV format: “https://tinyurl.com/gradeinput” [3pts]

```{r}
grade <- function(x){
x[is.na(x)] <- 0
mean(x[-which.min(x)])
}
```
#Use this function:
```{r}
grade(student1)
grade(student2)
grade(student3)
```


```{r}
gradebook <- read.csv( "https://tinyurl.com/gradeinput",
                       row.names = 1)
gradebook

```
I can use the `apply()` function if I figure out how to use the dom thing...

```{r}
ans <- apply(gradebook, 1,grade)
ans
```
> Q2. Using your grade() function and the supplied gradebook, Who is the top scoring studentoverall in the gradebook? [3pts]

```{r}
which.max(ans)
```

>Q3. From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall? [2pts]

```{r}
mask <- gradebook
mask [is.na(mask)] <- 0
hw.ave <- apply(mask, 2, mean)
hw.ave
which.min(hw.ave)
```

```{r}
apply(gradebook, 2, mean, na.rm=T)
```


we could the sum
```{r}
apply(gradebook,2, sum, na.rm=T)
```

>Q4. Optional Extension: From your analysis of the gradebook, which homework was most predictive of overall score (i.e. highest correlation with average grade score)? [1pt]


```{r}
cor(mask$hw5,ans)

```
```{r}
apply (mask, 2, cor,y=ans)
which.max(apply (mask, 2, cor,y=ans))
```
>Q5. Make sure you save your Quarto document and can click the “Render” (or Rmarkdown”Knit”) button to generate a PDF foramt report without errors. Finally, submit your PDF to gradescope. [1pt]






